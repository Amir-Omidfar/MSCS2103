// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //// Replace this comment with your code.
    //according to the input bits zx, nx, zy, ny, f, no.

    // if (zx == 1) sets x = 0        // 16-bit constant
    Mux16 (a = x, b[0..15] = false , sel = zx , out = zeroedx);
    // if (nx == 1) sets x = !x       // bitwise not
    Not16 (in = x, out=notx);
    Mux16 (a = x, b = notx , sel = nx , out = negx);

    // if (zy == 1) sets y = 0        // 16-bit constant
    Mux16 (a = y, b[0..15] = false , sel = zy , out = zeroedy);
    // if (ny == 1) sets y = !y       // bitwise not
    Not16 (in = y, out=noty);
    Mux16 (a = y, b = noty , sel = ny , out = negy);

    // if (f == 1)  sets out = x + y  // integer 2's complement addition
    // if (f == 0)  sets out = x & y  // bitwise and
    Add16 (a=negx,b=negy, out=sumxy);
    And16 (a=negx,b=negy, out=andxy);
    Mux16 (a = andxy, b = sumxy , sel = f , out = sumandxy);

    // if (no == 1) sets out = !out   // bitwise not
    Not16 (in = sumandxy, out = notsumandxy);
    Mux16 (a = sumandxy, b = notsumandxy , sel = no , out = res);


    //  out[16], // 16-bit output
    //  zr,      // if (out == 0) equals 1, else 0

    
    Or8Way (in[0]=res[0], in[0]=res[0],out=r1);
    Or8Way (in=res[8..15],out=r2);
    Or (a = res[0], b = res[1], out = a0);
    Or (a = res1, b = in[2], out = res2);
    Or (a = res2, b = in[3], out = res3);
    Or (a = res3, b = in[4], out = res4);
    Or (a = res4, b = in[5], out = res5);
    Or (a = res5, b = in[6], out = res6);
    Or (a = res6, b = in[7], out = out);
    Or (a = in[0], b = in[1], out = res1);
    Or (a = res1, b = in[2], out = res2);
    Or (a = res2, b = in[3], out = res3);
    Or (a = res3, b = in[4], out = res4);
    Or (a = res4, b = in[5], out = res5);
    Or (a = res5, b = in[6], out = res6);
    Or (a = res6, b = in[7], out = out);

    Or (a = r1, b = r2, out = o );
    //Or16Way (in=res,out=o);  //for zr
    Not (in=o,out=zr);
    //  ng;      // if (out < 0)  equals 1, else 0
    And16 (a[0..15]=true, b=res, out[15]=ng, out[0..14]=drop); //ng
    Or16 (a=res, b[0..15]=false, out=out); //res=output

}